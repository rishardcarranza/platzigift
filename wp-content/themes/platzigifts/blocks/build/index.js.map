{"version":3,"file":"index.js","mappings":";;;;;;;;;;AAAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA,eAAe,4BAA4B;WAC3C,eAAe;WACf,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA,8CAA8C;;;;;WCA9C;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;;;;;;CCN0E;;AAE1E;AACA;AACA;AAEAE,oEAAiB,CACb,UADa,EAEb;EACIM,KAAK,EAAE,aADX;EAEIC,WAAW,EAAE,+BAFjB;EAGIC,IAAI,EAAE,QAHV;EAIIC,QAAQ,EAAE,QAJd;EAKIC,UAAU,EAAE;IACRC,OAAO,EAAE;MACLC,IAAI,EAAE,QADD;MAELC,OAAO,EAAE;IAFJ,CADD;IAKRC,QAAQ,EAAE;MACNF,IAAI,EAAE,QADA,CACS;;IADT,CALF;IAQRG,QAAQ,EAAE;MACNH,IAAI,EAAE,QADA,CACS;;IADT;EARF,CALhB;EAiBII,IAAI,EAAGC,KAAD,IAAW;IACb,MAAM;MAAEP,UAAU,EAAE;QAACC;MAAD,CAAd;MAAyBO,aAAzB;MAAwCC,SAAxC;MAAmDC;IAAnD,IAAkEH,KAAxE;;IACA,MAAMI,oBAAoB,GAAIC,UAAD,IAAgB;MACzCJ,aAAa,CAAE;QAACP,OAAO,EAAEW;MAAV,CAAF,CAAb;IACH,CAFD;;IAGA,MAAMC,0BAA0B,GAAIC,KAAD,IAAW;MAC1CN,aAAa,CAAC;QACVJ,QAAQ,EAAEU,KAAK,CAACC,KAAN,CAAYC,IAAZ,CAAiBC,GADjB;QACsB;QAChCZ,QAAQ,EAAES,KAAK,CAACI,GAFN,CAEU;;MAFV,CAAD,CAAb;IAIH,CALD;;IAMA,OAAO,kIACK,kEAAC,sEAAD,QACI,kEAAC,4DAAD;MACI,KAAK,EAAC,sCADV;MAEI,WAAW,EAAG;IAFlB,GAGI,kEAAC,2DAAD,QACI,kEAAC,8DAAD;MACI,KAAK,EAAC,mBADV,CAC8B;MAD9B;MAEI,KAAK,EAAGjB,OAFZ,CAEsB;MAFtB;MAGI,QAAQ,EAAGU,oBAHf,CAGsC;;IAHtC,EADJ,CAHJ,CADJ,EAYI,kEAAC,4DAAD;MACI,KAAK,EAAC,0BADV;MAEI,WAAW,EAAG;IAFlB,GAGI,kEAAC,2DAAD,QACI,kEAAC,gEAAD;MACI,QAAQ,EAAGE,0BADf,CAC4C;MAD5C;MAEI,IAAI,EAAC,OAFT,CAEiB;MACb;MAHJ;MAII,MAAM,EAAG,QAAY;QAAA,IAAX;UAACM;QAAD,CAAW;QACjB;QACA,OAAO,kEAAC,yDAAD;UAAQ,SAAS,EAAC,qEAAlB;UAAwF,OAAO,EAAEA;QAAjG,uBAAP;MACH;IAPL,EADJ,CAHJ,CAZJ,CADL,EA6BK,kEAAC,sEAAD,CAAkB;IAAlB;MACI,KAAK,EAAC,UADV,CACqB;MADrB;MAEI,UAAU,EAAGZ,KAAK,CAACP,UAFvB,CAEoC;;IAFpC,EA7BL,CAAP;EAkCH,CA9DL;EA+DIoB,IAAI,EAAE,MAAM;AA/DhB,CAFa,CAAjB,C","sources":["webpack://blocks/external window [\"wp\",\"blockEditor\"]","webpack://blocks/external window [\"wp\",\"blocks\"]","webpack://blocks/external window [\"wp\",\"components\"]","webpack://blocks/external window [\"wp\",\"element\"]","webpack://blocks/external window [\"wp\",\"serverSideRender\"]","webpack://blocks/webpack/bootstrap","webpack://blocks/webpack/runtime/compat get default export","webpack://blocks/webpack/runtime/define property getters","webpack://blocks/webpack/runtime/hasOwnProperty shorthand","webpack://blocks/webpack/runtime/make namespace object","webpack://blocks/./src/index.js"],"sourcesContent":["module.exports = window[\"wp\"][\"blockEditor\"];","module.exports = window[\"wp\"][\"blocks\"];","module.exports = window[\"wp\"][\"components\"];","module.exports = window[\"wp\"][\"element\"];","module.exports = window[\"wp\"][\"serverSideRender\"];","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { InspectorControls, MediaUpload } from '@wordpress/block-editor'; // Esta librería está disponible desde que instalamos el paquete \"wordpress/scripts desde NPM\n\nimport { registerBlockType } from '@wordpress/blocks';\nimport { TextControl, PanelBody, PanelRow, Button } from '@wordpress/components'; \nimport ServerSideRender from '@wordpress/server-side-render';\n\nregisterBlockType(\n    'pg/basic',\n    {\n        title: 'Basic Block',\n        description: 'Este es nuestro primer bloque',\n        icon: 'smiley',\n        category: 'layout',\n        attributes: {\n            content: {\n                type: 'string',\n                default: 'Hello World',\n            },\n            mediaURL: {\n                type: 'string' // Definimos el tipo de dato que debe esperar el componente. En este caso es un texto (URL de la imagen), por eso lo declaramos como string.\n            },\n            mediaAlt: {\n                type: 'string' // Definimos el tipo de dato que debe esperar el componente. En este caso es un texto (Texto Alternativo de la imagen), por eso lo declaramos como string.\n            }\n        },\n        edit: (props) => {\n            const { attributes: {content}, setAttributes, className, isSelected } = props;\n            const handlerOnChangeInput = (newContent) => {\n                setAttributes( {content: newContent} )\n            };\n            const handlerOnSelectMediaUpload = (image) => {\n                setAttributes({\n                    mediaURL: image.sizes.full.url, // El objeto image cuenta con todas las propiedades de los archivos de la Media Library de WordPress, entre ellas los diferentes tamaños\n                    mediaAlt: image.alt // También cuenta con el Texto Alternativo definido en la Media Library para cada archivo\n                })\n            };\n            return <>\n                        <InspectorControls>\n                            <PanelBody\n                                title=\"Modificar texto del Bloque Básico\"\n                                initialOpen={ true }>\n                                <PanelRow>\n                                    <TextControl\n                                        label=\"Complete el campo\" // Indicaciones del campo\n                                        value={ content } // Asignación del atributo correspondiente\n                                        onChange={ handlerOnChangeInput } // Asignación de función para gestionar el evento OnChange\n                                    />\n                                </PanelRow>\n                            </PanelBody>\n                            <PanelBody\n                                title=\"Seleccioná una imagen\"\n                                initialOpen={ true }>\n                                <PanelRow>\n                                    <MediaUpload \n                                        onSelect={ handlerOnSelectMediaUpload } // Asignación de función para gestionar el evento OnSelect\n                                        type=\"image\" // Limita los tipos de archivos que se pueden seleccionar\n                                        // Se envía el evento open y el renderizado del elemento que desencadenará la apertura de la librería, en este caso un botón\n                                        render={ ({open}) => {\n                                            //Agregamos las clases de los botones de WordPress habituales para que mantenga el estilo dentro del editor\n                                            return <Button className=\"button media-button button-primary button-large media-button-select\" onClick={open}>Elegir una imagen</Button>;\n                                        }}\n                                    />\n                                </PanelRow>\n                            </PanelBody>\n                        </InspectorControls>\n                        <ServerSideRender // Renderizado de bloque dinámico\n                            block=\"pg/basic\" // Nombre del bloque\n                            attributes={ props.attributes } // Se envían todos los atributos\n                        />\n                    </>\n        },\n        save: () => null\n    }\n);"],"names":["InspectorControls","MediaUpload","registerBlockType","TextControl","PanelBody","PanelRow","Button","ServerSideRender","title","description","icon","category","attributes","content","type","default","mediaURL","mediaAlt","edit","props","setAttributes","className","isSelected","handlerOnChangeInput","newContent","handlerOnSelectMediaUpload","image","sizes","full","url","alt","open","save"],"sourceRoot":""}